name: Build, Test, and Deploy (Vercel + Hetzner)

on:
  push:
    branches: [ dev, main-hetz, 'feat/**', 'fix/**' ]
  repository_dispatch:
    types: [ deploy ]
  workflow_dispatch:

env:
  NODE_VERSION: 22

permissions:
  contents: read
  actions: read
  packages: write

concurrency:
  group: cicd-${{ github.event.repository.name || github.repository }}-${{ github.ref_name || github.event.client_payload.branch }}
  cancel-in-progress: true

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      repository:       ${{ steps.p.outputs.repository }}
      repository_name:  ${{ steps.p.outputs.repository_name }}
      branch:           ${{ steps.p.outputs.branch }}
      project_type:     ${{ steps.detect.outputs.PROJECT_TYPE }}
      slug:             ${{ steps.cfg.outputs.SLUG }}
      port:             ${{ steps.cfg.outputs.PORT }}
      domain_prod:      ${{ steps.cfg.outputs.DOMAIN_PROD }}
      domain_admin:     ${{ steps.cfg.outputs.DOMAIN_ADMIN }}
    steps:
      - name: Extract payload (repo/branch)
        id: p
        run: |
          echo "repository=${{ github.event.client_payload.repository || github.repository }}" >> $GITHUB_OUTPUT
          echo "repository_name=${{ github.event.client_payload.repository_name || github.event.repository.name }}" >> $GITHUB_OUTPUT
          echo "branch=${{ github.event.client_payload.branch || github.ref_name }}" >> $GITHUB_OUTPUT

      - name: Checkout target website repo
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.p.outputs.repository }}
          ref: ${{ steps.p.outputs.branch }}
          fetch-depth: 0
          path: site

      - name: Verify package.json present
        working-directory: site
        run: test -f package.json || { echo "package.json not found in site/"; exit 1; }

      - name: Read .cicd-config.yml (slug/port/domains)
        id: cfg
        shell: bash
        working-directory: site
        run: |
          SLUG="site"
          PORT="3000"
          DOMAIN_PROD=""
          DOMAIN_ADMIN=""
          if [ -f ".cicd-config.yml" ]; then
            get_val(){ grep -E "^$1:" .cicd-config.yml | head -1 | awk -F': *' '{print $2}' | tr -d "\"'"; }
            SLUG=$(get_val slug || echo "$SLUG")
            PORT=$(get_val port || echo "$PORT")
            DOM_BLOCK="$(awk '/^domains:/{f=1;next} f && /^[^ ]/{f=0} f{print}' .cicd-config.yml)"
            DOMAIN_PROD="$(printf '%s\n' "$DOM_BLOCK" | awk '/prod:/{print $2}' | tr -d "\"'")"
            DOMAIN_ADMIN="$(printf '%s\n' "$DOM_BLOCK" | awk '/admin:/{print $2}' | tr -d "\"'")"
          fi
          echo "SLUG=$SLUG" >> $GITHUB_OUTPUT
          echo "PORT=$PORT" >> $GITHUB_OUTPUT
          echo "DOMAIN_PROD=$DOMAIN_PROD" >> $GITHUB_OUTPUT
          echo "DOMAIN_ADMIN=$DOMAIN_ADMIN" >> $GITHUB_OUTPUT

      - name: Detect project type
        id: detect
        working-directory: site
        run: |
          PT="node"
          if [ -f ".cicd-config.yml" ] && grep -qE '^project_type:\s*static' .cicd-config.yml; then
            PT="static"
          fi
          echo "PROJECT_TYPE=$PT" >> $GITHUB_OUTPUT

  build_test:
    runs-on: ubuntu-latest
    needs: [detect]
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ needs.detect.outputs.repository }}
          ref: ${{ needs.detect.outputs.branch }}
          path: site

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Clean npm lock (use Yarn only)
        working-directory: site
        run: rm -f package-lock.json

      - name: Install deps
        working-directory: site
        run: |
          if [ -f yarn.lock ]; then yarn install --immutable; \
          elif [ -f pnpm-lock.yaml ]; then corepack enable && pnpm i --frozen-lockfile; \
          else npm ci; fi

      - name: Lint (non-blocking)
        working-directory: site
        run: |
          if [ -f package.json ] && jq -e '.scripts.lint' package.json >/dev/null 2>&1; then \
            npm run lint || true; else echo "no lint script"; fi

      - name: Derive REPO_KEY (UPPERCASE, '-' -> '_')
        id: repokey
        run: |
          NAME="${{ needs.detect.outputs.repository_name }}"
          KEY_UPPER="$(echo "$NAME" | tr '[:lower:]-' '[:upper:]_')"
          echo "KEY_UPPER=$KEY_UPPER" >> $GITHUB_OUTPUT

      - name: Debug derived key
        run: echo "REPO_KEY=${{ steps.repokey.outputs.KEY_UPPER }}"

      - name: Load SITE_ENV__{REPO_KEY} into .env for build
        env:
          SITE_ENV: ${{ secrets[format('SITE_ENV__{0}', steps.repokey.outputs.KEY_UPPER)] }}
        working-directory: site
        run: |
          [ -n "${SITE_ENV:-}" ] || { echo "❌ Missing secret SITE_ENV__${{ steps.repokey.outputs.KEY_UPPER }}"; exit 1; }
          printf "%s\n" "$SITE_ENV" | sed 's/\r$//' > .env
          grep -q '^DATABASE_URL=' .env || { echo "❌ DATABASE_URL missing"; exit 1; }
          if ! grep -q '^RESEND_API_KEY=' .env; then
            echo "⚠️ RESEND_API_KEY missing (email features may be disabled during build)"
          fi
          echo "Preview of .env:" && sed -n '1,20p' .env || true

      - name: Prisma generate (for Next build)
        working-directory: site
        run: npx prisma generate

      - name: Build
        working-directory: site
        run: npm run build -- --no-lint

      - name: Unit tests (optional)
        working-directory: site
        run: npm test || echo "No tests / skipping"

      - name: (static only) assert out/
        if: needs.detect.outputs.project_type == 'static'
        working-directory: site
        run: test -d out || { echo "Static build missing out/"; exit 1; }

      - name: Upload out/ artifact (static only)
        if: needs.detect.outputs.project_type == 'static'
        uses: actions/upload-artifact@v4
        with:
          name: static-export
          path: site/out

  vercel_preview:
    needs: [detect, build_test]
    if: startsWith(needs.detect.outputs.branch, 'feat/') || startsWith(needs.detect.outputs.branch, 'fix/')
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ needs.detect.outputs.repository }}
          ref: ${{ needs.detect.outputs.branch }}
          path: site

      - name: Derive REPO_KEY (UPPERCASE, '-' -> '_')
        id: repokey
        run: |
          NAME="${{ needs.detect.outputs.repository_name }}"
          KEY_UPPER="$(echo "$NAME" | tr '[:lower:]-' '[:upper:]_')"
          echo "KEY_UPPER=$KEY_UPPER" >> $GITHUB_OUTPUT

      - name: Debug derived key
        run: echo "REPO_KEY=${{ steps.repokey.outputs.KEY_UPPER }}"

      - name: Load SITE_ENV__{REPO_KEY} and export Vercel IDs
        env:
          SITE_ENV: ${{ secrets[format('SITE_ENV__{0}', steps.repokey.outputs.KEY_UPPER)] }}
        working-directory: site
        run: |
          [ -n "${SITE_ENV:-}" ] || { echo "❌ Missing secret SITE_ENV__${{ steps.repokey.outputs.KEY_UPPER }}"; exit 1; }
          printf "%s\n" "$SITE_ENV" | sed 's/\r$//' > .site_env
          ORG="$(awk -F= '/^VERCEL_ORG_ID=/{print $2}' .site_env | tail -1)"
          PRJ="$(awk -F= '/^VERCEL_PROJECT_ID=/{print $2}' .site_env | tail -1)"
          [ -n "$ORG" ] || ORG="$(awk -F= '/^orgId=/{print $2}' .site_env | tail -1)"
          [ -n "$PRJ" ] || PRJ="$(awk -F= '/^projectId=/{print $2}' .site_env | tail -1)"
          [ -n "$ORG" ] && echo "VERCEL_ORG_ID=$ORG" >> $GITHUB_ENV || { echo "❌ VERCEL_ORG_ID missing"; exit 1; }
          [ -n "$PRJ" ] && echo "VERCEL_PROJECT_ID=$PRJ" >> $GITHUB_ENV || { echo "❌ VERCEL_PROJECT_ID missing"; exit 1; }

      - if: env.VERCEL_TOKEN == ''
        run: echo "⚠️ Missing Vercel token; skipping Vercel preview." && echo "SKIP=1" >> $GITHUB_ENV

      - if: env.SKIP != '1'
        working-directory: site
        run: npm i -g vercel

      - if: env.SKIP != '1'
        working-directory: site
        run: vercel pull --yes --environment=preview --token="${{ env.VERCEL_TOKEN }}"

      - if: env.SKIP != '1'
        working-directory: site
        run: |
          : > .env
          if [ -f ".vercel/.env.preview.local" ]; then
            cat .vercel/.env.preview.local >> .env
          elif [ -f ".vercel/.env.development.local" ]; then
            cat .vercel/.env.development.local >> .env
          fi
          while IFS='=' read -r k v; do
            [ -z "$k" ] && continue
            [ "${k#\#}" != "$k" ] && continue
            if ! grep -qE "^${k}=" .env 2>/dev/null; then
              echo "${k}=${v}" >> .env
            fi
          done < .site_env
          grep -qE '^(NEXT_PUBLIC_SITE_URL|SITE_URL)=' .env || echo 'SITE_URL=https://example.com' >> .env
          echo "Wrote .env for build (first lines):"; sed -n '1,20p' .env

      - if: env.SKIP != '1'
        working-directory: site
        run: npx prisma generate

      - if: env.SKIP != '1'
        working-directory: site
        run: vercel build --token="${{ env.VERCEL_TOKEN }}"

      - if: env.SKIP != '1'
        working-directory: site
        run: vercel deploy --prebuilt --token="${{ env.VERCEL_TOKEN }}"

  vercel_prod:
    needs: [detect, build_test]
    if: needs.detect.outputs.branch == 'dev'
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ needs.detect.outputs.repository }}
          ref: ${{ needs.detect.outputs.branch }}
          path: site

      - name: Derive REPO_KEY (UPPERCASE, '-' -> '_')
        id: repokey
        run: |
          NAME="${{ needs.detect.outputs.repository_name }}"
          KEY_UPPER="$(echo "$NAME" | tr '[:lower:]-' '[:upper:]_')"
          echo "KEY_UPPER=$KEY_UPPER" >> $GITHUB_OUTPUT

      - name: Debug derived key
        run: echo "REPO_KEY=${{ steps.repokey.outputs.KEY_UPPER }}"

      - name: Load SITE_ENV__{REPO_KEY} and export Vercel IDs
        env:
          SITE_ENV: ${{ secrets[format('SITE_ENV__{0}', steps.repokey.outputs.KEY_UPPER)] }}
        working-directory: site
        run: |
          [ -n "${SITE_ENV:-}" ] || { echo "❌ Missing secret SITE_ENV__${{ steps.repokey.outputs.KEY_UPPER }}"; exit 1; }
          printf "%s\n" "$SITE_ENV" | sed 's/\r$//' > .site_env
          ORG="$(awk -F= '/^VERCEL_ORG_ID=/{print $2}' .site_env | tail -1)"
          PRJ="$(awk -F= '/^VERCEL_PROJECT_ID=/{print $2}' .site_env | tail -1)"
          [ -n "$ORG" ] || ORG="$(awk -F= '/^orgId=/{print $2}' .site_env | tail -1)"
          [ -n "$PRJ" ] || PRJ="$(awk -F= '/^projectId=/{print $2}' .site_env | tail -1)"
          [ -n "$ORG" ] && echo "VERCEL_ORG_ID=$ORG" >> $GITHUB_ENV || { echo "❌ VERCEL_ORG_ID missing"; exit 1; }
          [ -n "$PRJ" ] && echo "VERCEL_PROJECT_ID=$PRJ" >> $GITHUB_ENV || { echo "❌ VERCEL_PROJECT_ID missing"; exit 1; }

      - if: env.VERCEL_TOKEN == ''
        run: echo "⚠️ Missing Vercel token; skipping Vercel prod." && echo "SKIP=1" >> $GITHUB_ENV

      - if: env.SKIP != '1'
        working-directory: site
        run: npm i -g vercel

      - if: env.SKIP != '1'
        working-directory: site
        run: vercel pull --yes --environment=production --token="${{ env.VERCEL_TOKEN }}"

      - if: env.SKIP != '1'
        working-directory: site
        run: |
          : > .env
          if [ -f ".vercel/.env.production.local" ]; then
            cat .vercel/.env.production.local >> .env
          fi
          while IFS='=' read -r k v; do
            [ -z "$k" ] && continue
            [ "${k#\#}" != "$k" ] && continue
            if ! grep -qE "^${k}=" .env 2>/dev/null; then
              echo "${k}=${v}" >> .env
            fi
          done < .site_env
          grep -qE '^(NEXT_PUBLIC_SITE_URL|SITE_URL)=' .env || echo 'SITE_URL=https://example.com' >> .env
          echo "Wrote .env for build (first lines):"; sed -n '1,20p' .env

      - if: env.SKIP != '1'
        working-directory: site
        run: npx prisma generate

      - if: env.SKIP != '1'
        working-directory: site
        run: vercel build --prod --token="${{ env.VERCEL_TOKEN }}"

      - if: env.SKIP != '1'
        working-directory: site
        run: vercel deploy --prebuilt --prod --token="${{ env.VERCEL_TOKEN }}"

  image_build_push:
    needs: [detect, build_test]
    if: needs.detect.outputs.project_type == 'node' && needs.detect.outputs.branch == 'main-hetz'
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.meta.outputs.image }}
      ref:   ${{ steps.meta.outputs.ref }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ needs.detect.outputs.repository }}
          ref: ${{ needs.detect.outputs.branch }}
          path: site

      - name: Derive image coordinates
        id: meta
        run: |
          OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME="${{ needs.detect.outputs.repository_name }}"
          IMAGE="ghcr.io/${OWNER_LOWER}/${REPO_NAME}"
          SHORT="${GITHUB_SHA::7}"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "ref=$IMAGE:$SHORT" >> $GITHUB_OUTPUT

      - uses: docker/setup-buildx-action@v3

      - name: Derive REPO_KEY (UPPERCASE, '-' -> '_')
        id: repokey
        run: |
          NAME="${{ needs.detect.outputs.repository_name }}"
          KEY_UPPER="$(echo "$NAME" | tr '[:lower:]-' '[:upper:]_')"
          echo "KEY_UPPER=$KEY_UPPER" >> $GITHUB_OUTPUT

      - name: Export base URLs from SITE_ENV secret
        id: envparse
        env:
          SITE_ENV_SECRET: ${{ secrets[format('SITE_ENV__{0}', steps.repokey.outputs.KEY_UPPER)] }}
          DOMAIN: ${{ needs.detect.outputs.domain_prod }}
          ADMIN_DOMAIN: ${{ needs.detect.outputs.domain_admin }}
        run: |
          [ -n "${SITE_ENV_SECRET:-}" ] || { echo "❌ Missing SITE_ENV secret"; exit 1; }
          printf "%s\n" "$SITE_ENV_SECRET" | sed 's/\r$//' > .site_env
          get(){ awk -F= -v k="$1" '$1==k{print $2}' .site_env | tail -1; }
          NPU="$(get NEXT_PUBLIC_SITE_URL)";   [ -n "$NPU" ] || NPU="https://${DOMAIN}"
          NPA="$(get NEXT_PUBLIC_ADMIN_URL)";  [ -n "$NPA" ] || { [ -n "${ADMIN_DOMAIN:-}" ] && NPA="https://${ADMIN_DOMAIN}" || NPA=""; }
          SU="$(get SITE_URL)";                [ -n "$SU" ]  || SU="https://${DOMAIN}"
          echo "NEXT_PUBLIC_SITE_URL=$NPU"  >> $GITHUB_OUTPUT
          echo "NEXT_PUBLIC_ADMIN_URL=$NPA" >> $GITHUB_OUTPUT
          echo "SITE_URL=$SU"               >> $GITHUB_OUTPUT
          echo "Using base URLs:"; echo "$NPU"; echo "$NPA"; echo "$SU"

      - name: Check Docker Hub creds (optional)
        id: dh
        env:
          DHU: ${{ secrets.DOCKERHUB_USERNAME }}
          DHT: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          if [ -n "${DHU:-}" ] && [ -n "${DHT:-}" ]; then
            echo "present=1" >> $GITHUB_OUTPUT
          else
            echo "present=0" >> $GITHUB_OUTPUT
          fi

      - name: Login to Docker Hub (for base images)
        if: steps.dh.outputs.present == '1'
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push site image
        id: buildpush
        uses: docker/build-push-action@v6
        with:
          context: site
          push: true
          pull: true
          tags: |
            ${{ steps.meta.outputs.ref }}
            ${{ steps.meta.outputs.image }}:latest
          build-args: |
            NEXT_PUBLIC_SITE_URL=${{ steps.envparse.outputs.NEXT_PUBLIC_SITE_URL }}
            NEXT_PUBLIC_ADMIN_URL=${{ steps.envparse.outputs.NEXT_PUBLIC_ADMIN_URL }}
            SITE_URL=${{ steps.envparse.outputs.SITE_URL }}

  hetzner_node:
    needs: [detect, image_build_push]
    if: needs.detect.outputs.project_type == 'node' && needs.detect.outputs.branch == 'main-hetz'
    runs-on: ubuntu-latest
    steps:
      - name: Derive REPO_KEY (UPPERCASE, '-' -> '_')
        id: repokey
        run: |
          NAME="${{ needs.detect.outputs.repository_name }}"
          KEY_UPPER="$(echo "$NAME" | tr '[:lower:]-' '[:upper:]_')"
          echo "KEY_UPPER=$KEY_UPPER" >> $GITHUB_OUTPUT

      - name: Load SITE_ENV__{REPO_KEY} to env
        env:
          SITE_ENV_SECRET: ${{ secrets[format('SITE_ENV__{0}', steps.repokey.outputs.KEY_UPPER)] }}
        run: |
          [ -n "${SITE_ENV_SECRET:-}" ] || { echo "❌ Missing secret SITE_ENV__${{ steps.repokey.outputs.KEY_UPPER }}"; exit 1; }
          {
            echo 'SITE_ENV<<EOF'
            printf '%s\n' "$SITE_ENV_SECRET"
            echo 'EOF'
          } >> "$GITHUB_ENV"

      - name: Sanity check required SSH secrets
        env:
          HZ_HOST:    ${{ secrets.HZ_HOST }}
          HZ_SSH_KEY: ${{ secrets.HZ_SSH_KEY }}
        run: |
          [ -n "${HZ_HOST:-}" ]    || { echo "❌ Missing secret: HZ_HOST"; exit 1; }
          [ -n "${HZ_SSH_KEY:-}" ] || { echo "❌ Missing secret: HZ_SSH_KEY"; exit 1; }

      - name: Deploy over SSH (Traefik + DB + app; admin inline if provided)
        uses: appleboy/ssh-action@v1
        env:
          SLUG:         ${{ needs.detect.outputs.slug }}
          PORT:         ${{ needs.detect.outputs.port }}
          DOMAIN:       ${{ needs.detect.outputs.domain_prod }}
          ADMIN_DOMAIN: ${{ needs.detect.outputs.domain_admin }}
          IMAGE_REF:    ${{ needs.image_build_push.outputs.ref }}
          SITE_ENV:     ${{ env.SITE_ENV }}
          GHCR_USER:    ${{ github.repository_owner }}
          GHCR_TOKEN:   ${{ secrets.GHCR_READ_TOKEN || secrets.GITHUB_TOKEN }}
        with:
          host: ${{ secrets.HZ_HOST }}
          username: ${{ secrets.HZ_USER || 'root' }}
          key: ${{ secrets.HZ_SSH_KEY }}
          port: 22
          timeout: 60s
          command_timeout: 25m
          envs: SLUG,PORT,DOMAIN,ADMIN_DOMAIN,IMAGE_REF,SITE_ENV,GHCR_USER,GHCR_TOKEN
          script: |
            set -euo pipefail
            [ -n "${SLUG:-}" ] && [ -n "${DOMAIN:-}" ] && [ -n "${IMAGE_REF:-}" ] || { echo "❌ Missing SLUG/DOMAIN/IMAGE_REF"; exit 1; }

            docker network create proxy >/dev/null 2>&1 || true
            docker network create core_db_net >/dev/null 2>&1 || true

            SITE_ENV_NORM="$(printf "%s\n" "${SITE_ENV:-}" | sed 's/\r$//')"

            ACME_EMAIL="$(printf "%s\n" "$SITE_ENV_NORM" | awk -F= '/^ACME_EMAIL=/{print $2}' | tail -1)"
            [ -n "$ACME_EMAIL" ] || { echo "❌ ACME_EMAIL missing in SITE_ENV"; exit 1; }

            DB_NAME="$(printf "%s\n" "$SITE_ENV_NORM" | awk -F= '/^POSTGRES_DB=/{print $2}' | tail -1)"
            [ -n "$DB_NAME" ] || DB_NAME="$(printf "%s\n" "$SITE_ENV_NORM" | awk -F= '/^DB_NAME=/{print $2}' | tail -1)"
            [ -n "$DB_NAME" ] || DB_NAME="princefoods"

            POSTGRES_PASSWORD_VAL="$(printf "%s\n" "$SITE_ENV_NORM" | awk -F= '/^POSTGRES_PASSWORD=/{print $2}' | tail -1)"
            [ -n "$POSTGRES_PASSWORD_VAL" ] || { echo "❌ POSTGRES_PASSWORD missing in SITE_ENV"; exit 1; }

            TDIR="/opt/services/traefik"
            mkdir -p "$TDIR/letsencrypt"
            [ -f "$TDIR/letsencrypt/acme.json" ] || install -m 600 /dev/null "$TDIR/letsencrypt/acme.json"
            cat > "$TDIR/.env" <<EOF
            ACME_EMAIL=${ACME_EMAIL}
            EOF
            cat > "$TDIR/docker-compose.yml" <<'YAML'
            services:
              traefik:
                image: traefik:v3.0
                restart: unless-stopped
                env_file: .env
                command:
                  - --providers.docker=true
                  - --providers.docker.exposedbydefault=false
                  - --entrypoints.web.address=:80
                  - --entrypoints.websecure.address=:443
                  - --certificatesresolvers.le.acme.email=${ACME_EMAIL}
                  - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
                  - --certificatesresolvers.le.acme.httpchallenge=true
                  - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
                ports:
                  - 80:80
                  - 443:443
                volumes:
                  - /var/run/docker.sock:/var/run/docker.sock:ro
                  - ./letsencrypt:/letsencrypt
                networks:
                  - proxy
            networks:
              proxy:
                external: true
                name: proxy
            YAML
            (cd "$TDIR" && docker compose up -d)

            if [ -n "${GHCR_TOKEN:-}" ]; then
              echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USER" --password-stdin
            fi

            SITE_DIR="/opt/sites/${SLUG}"
            mkdir -p "$SITE_DIR"
            cd "$SITE_DIR"
            printf "%s\n" "$SITE_ENV_NORM" > app.env

            DB_DIR="/opt/services/postgres"
            mkdir -p "$DB_DIR"
            cat > "${DB_DIR}/.env" <<EOF
            POSTGRES_USER=admin
            POSTGRES_PASSWORD=${POSTGRES_PASSWORD_VAL}
            POSTGRES_DB=${DB_NAME}
            DB_USER=admin
            DB_PASSWORD=${POSTGRES_PASSWORD_VAL}
            DB_HOST=postgres
            DB_NAME=${DB_NAME}
            EOF

            cat > "${DB_DIR}/docker-compose.yml" <<'DBYAML'
            services:
              postgres:
                image: postgres:15
                restart: always
                env_file: .env
                environment:
                  POSTGRES_INITDB_ARGS: "--auth=scram-sha-256"
                volumes:
                  - pg_data:/var/lib/postgresql/data
                healthcheck:
                  test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
                  interval: 10s
                  timeout: 5s
                  retries: 10
                networks:
                  - core_db_net

              pgbouncer:
                image: edoburu/pgbouncer
                restart: always
                env_file: .env
                environment:
                  POOL_MODE: transaction
                  MAX_CLIENT_CONN: 200
                  DEFAULT_POOL_SIZE: 20
                  AUTH_TYPE: plain
                depends_on:
                  postgres:
                    condition: service_healthy
                networks:
                  - core_db_net

            volumes:
              pg_data:

            networks:
              core_db_net:
                external: true
                name: core_db_net
            DBYAML
            (cd "${DB_DIR}" && docker compose up -d)

            if [ -n "${ADMIN_DOMAIN:-}" ]; then
              cat > docker-compose.yml <<YAML
            services:
              app:
                image: ${IMAGE_REF}
                restart: unless-stopped
                env_file:
                  - app.env
                labels:
                  - "traefik.enable=true"
                  - "traefik.docker.network=proxy"
                  - "traefik.http.routers.${SLUG}.rule=Host(\\\`${DOMAIN}\\\`) || Host(\\\`www.${DOMAIN}\\\`)"
                  - "traefik.http.routers.${SLUG}.entrypoints=websecure"
                  - "traefik.http.routers.${SLUG}.tls.certresolver=le"
                  - "traefik.http.routers.${SLUG}.service=${SLUG}"
                  - "traefik.http.services.${SLUG}.loadbalancer.server.port=${PORT}"
                  - "traefik.http.routers.${SLUG}-admin.rule=Host(\\\`${ADMIN_DOMAIN}\\\`)"
                  - "traefik.http.routers.${SLUG}-admin.entrypoints=websecure"
                  - "traefik.http.routers.${SLUG}-admin.tls.certresolver=le"
                  - "traefik.http.routers.${SLUG}-admin.service=${SLUG}"
                  - "traefik.http.routers.${SLUG}-http.rule=Host(\\\`${DOMAIN}\\\`) || Host(\\\`www.${DOMAIN}\\\`)"
                  - "traefik.http.routers.${SLUG}-http.entrypoints=web"
                  - "traefik.http.routers.${SLUG}-http.middlewares=${SLUG}-redirect"
                  - "traefik.http.routers.${SLUG}-http.service=${SLUG}"
                  - "traefik.http.middlewares.${SLUG}-redirect.redirectscheme.scheme=https"
                networks:
                  - proxy
                  - core_db_net

            networks:
              proxy:
                external: true
                name: proxy
              core_db_net:
                external: true
                name: core_db_net
            YAML
            else
              cat > docker-compose.yml <<YAML
            services:
              app:
                image: ${IMAGE_REF}
                restart: unless-stopped
                env_file:
                  - app.env
                labels:
                  - "traefik.enable=true"
                  - "traefik.docker.network=proxy"
                  - "traefik.http.routers.${SLUG}.rule=Host(\\\`${DOMAIN}\\\`) || Host(\\\`www.${DOMAIN}\\\`)"
                  - "traefik.http.routers.${SLUG}.entrypoints=websecure"
                  - "traefik.http.routers.${SLUG}.tls.certresolver=le"
                  - "traefik.http.routers.${SLUG}.service=${SLUG}"
                  - "traefik.http.services.${SLUG}.loadbalancer.server.port=${PORT}"
                  - "traefik.http.routers.${SLUG}-http.rule=Host(\\\`${DOMAIN}\\\`) || Host(\\\`www.${DOMAIN}\\\`)"
                  - "traefik.http.routers.${SLUG}-http.entrypoints=web"
                  - "traefik.http.routers.${SLUG}-http.middlewares=${SLUG}-redirect"
                  - "traefik.http.routers.${SLUG}-http.service=${SLUG}"
                  - "traefik.http.middlewares.${SLUG}-redirect.redirectscheme.scheme=https"
                networks:
                  - proxy
                  - core_db_net

            networks:
              proxy:
                external: true
                name: proxy
              core_db_net:
                external: true
                name: core_db_net
            YAML
            fi

            docker compose pull || true
            docker compose up -d --remove-orphans
            docker compose exec -T app sh -lc "npx prisma migrate deploy || true"

      - name: In-container health check (bypasses DNS/SSL)
        uses: appleboy/ssh-action@v1
        env:
          SLUG:   ${{ needs.detect.outputs.slug }}
          DOMAIN: ${{ needs.detect.outputs.domain_prod }}
        with:
          host: ${{ secrets.HZ_HOST }}
          username: ${{ secrets.HZ_USER || 'root' }}
          key: ${{ secrets.HZ_SSH_KEY }}
          port: 22
          timeout: 60s
          command_timeout: 10m
          envs: SLUG,DOMAIN
          script: |
            set -euo pipefail
            cd /opt/sites/${SLUG}
            PORT=$(docker compose exec -T app sh -lc 'printf "%s" "${PORT:-3000}"')
            echo "Detected PORT=$PORT"
            ok=0
            for path in /api/healthz /api/healthz/ /app/api/healthz /app/api/healthz/; do
              echo "Probing http://127.0.0.1:${PORT}${path}"
              for i in $(seq 1 20); do
                if docker compose exec -T app node -e "const http=require('http');http.get({host:'127.0.0.1',port:${PORT},path:'${path}',headers:{'x-forwarded-proto':'https','host':'${DOMAIN:-localhost}'}},r=>process.exit(r.statusCode<400?0:1)).on('error',()=>process.exit(1))"; then
                  echo "✅ ${path} OK"
                  ok=1; break
                fi
                echo "  retry $i"; sleep 3
              done
              [ $ok -eq 1 ] && break
            done
            if [ $ok -ne 1 ]; then
              echo "❌ App not healthy internally. Recent logs:" && docker compose logs --no-color --tail=200 app || true
              exit 1
            fi
            echo "✅ App healthy inside container"

      - name: Short settle (first issue of certificates, etc.)
        run: sleep 10

      - name: Public health check (through Traefik)
        env:
          DOMAIN: ${{ needs.detect.outputs.domain_prod }}
        run: |
          set -e
          urls=(
            "https://${DOMAIN}/api/healthz"
            "https://${DOMAIN}/api/healthz/"
            "https://${DOMAIN}/"
          )
          ok=0
          for i in {1..36}; do
            for u in "${urls[@]}"; do
              code=$(curl -k -L -sS -o /tmp/health_body -w "%{http_code}" "$u" || true)
              echo "GET $u -> HTTP $code"
              if [[ "$code" =~ ^(200|204|301|302|307|308)$ ]]; then
                echo "✅ Public health OK ($code) at $u"; ok=1; break
              fi
              if grep -q "404 page not found" /tmp/health_body 2>/dev/null; then
                echo "Traefik 404 (router warming or path) — retrying…"
              else
                echo "Body (first 400 bytes):"; head -c 400 /tmp/health_body || true; echo
              fi
            done
            [ $ok -eq 1 ] && break
            sleep 5
          done
          [ $ok -eq 1 ] || { echo "❌ Public health failed"; exit 1; }

  hetzner_static:
    needs: [detect, build_test]
    if: needs.detect.outputs.project_type == 'static' && needs.detect.outputs.branch == 'main-hetz'
    runs-on: ubuntu-latest
    env:
      SLUG:   ${{ needs.detect.outputs.slug }}
      DOMAIN: ${{ needs.detect.outputs.domain_prod }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: static-export

      - name: Move artifact to ./out
        run: |
          rm -rf out && mkdir -p out
          cp -R static-export/. out/

      - name: Create Dockerfile for static image
        run: |
          cat > site.Dockerfile <<'DOCKER'
          FROM nginx:alpine
          COPY out/ /usr/share/nginx/html
          RUN adduser -D -g 'www' www \
           && chown -R www:www /usr/share/nginx/html \
           && sed -i 's/user  nginx;/user www;/' /etc/nginx/nginx.conf
          EXPOSE 80
          DOCKER

      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push static image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: site.Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/static-${{ needs.detect.outputs.repository_name }}:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/static-${{ needs.detect.outputs.repository_name }}:latest

      - name: Deploy static container on Hetzner (HTTPS only)
        uses: appleboy/ssh-action@v1
        env:
          SLUG: ${{ needs.detect.outputs.slug }}
          DOMAIN: ${{ needs.detect.outputs.domain_prod }}
          IMAGE_REF: ghcr.io/${{ github.repository_owner }}/static-${{ needs.detect.outputs.repository_name }}:${{ github.sha }}
          GHCR_USER: ${{ github.repository_owner }}
          GHCR_TOKEN: ${{ secrets.GHCR_READ_TOKEN || secrets.GITHUB_TOKEN }}
        with:
          host: ${{ secrets.HETZNER_HOST || secrets.HZ_HOST }}
          username: ${{ secrets.HETZNER_USER || secrets.HZ_USER || 'root' }}
          key: ${{ secrets.HETZNER_SSH_KEY || secrets.HZ_SSH_KEY }}
          port: 22
          timeout: 60s
          command_timeout: 15m
          envs: SLUG,DOMAIN,IMAGE_REF,GHCR_USER,GHCR_TOKEN
          script: |
            set -euo pipefail
            docker network create proxy >/dev/null 2>&1 || true
            if [ -n "${GHCR_TOKEN:-}" ]; then
              echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USER" --password-stdin
            fi
            SITE_DIR="/opt/sites/${SLUG}"
            mkdir -p "$SITE_DIR"
            cd "$SITE_DIR"
            cat > docker-compose.yml <<YAML
            services:
              web:
                image: ${IMAGE_REF}
                restart: unless-stopped
                labels:
                  - "traefik.enable=true"
                  - "traefik.docker.network=proxy"
                  - "traefik.http.routers.${SLUG}.rule=Host(\\\`${DOMAIN}\\\`)"
                  - "traefik.http.routers.${SLUG}.entrypoints=websecure"
                  - "traefik.http.routers.${SLUG}.tls.certresolver=le"
                  - "traefik.http.services.${SLUG}.loadbalancer.server.port=80"
                  - "traefik.http.routers.${SLUG}-http.rule=Host(\\\`${DOMAIN}\\\`)"
                  - "traefik.http.routers.${SLUG}-http.entrypoints=web"
                  - "traefik.http.routers.${SLUG}-http.middlewares=${SLUG}-redirect"
                  - "traefik.http.routers.${SLUG}-http.service=${SLUG}"
                  - "traefik.http.middlewares.${SLUG}-redirect.redirectscheme.scheme=https"
                networks:
                  - proxy
            networks:
              proxy:
                external: true
                name: proxy
            YAML
            docker compose pull || true
            docker compose up -d --remove-orphans

      - name: Static public check
        run: |
          for i in {1..36}; do
            if curl -fsSL "https://${{ needs.detect.outputs.domain_prod }}/" >/dev/null; then
              echo "✅ Site up"; exit 0; fi
            echo "retry $i"; sleep 5
          done
          echo "❌ Timed out"; exit 1

      - name: Trigger Receive & Deploy (post-Hetzner static)
        if: needs.detect.outputs.branch == 'main-hetz' && success()
        run: |
          curl -sS -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.CICD_DISPATCH_TOKEN }}" \
            https://api.github.com/repos/CICD/multi-site-hetz-cicd/dispatches \
            -d @- <<'JSON'
          {
            "event_type": "deploy",
            "client_payload": {
              "repository": "${{ needs.detect.outputs.repository }}",
              "repository_name": "${{ needs.detect.outputs.repository_name }}",
              "branch": "${{ needs.detect.outputs.branch }}"
            }
          }
          JSON
