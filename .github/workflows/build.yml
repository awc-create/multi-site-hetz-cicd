name: Build, Test, and Deploy (Vercel + Hetzner)

on:
  push:
    branches: [ dev, main-hetz, 'feat/**', 'fix/**' ]
  repository_dispatch:
    types: [ deploy ]
  workflow_dispatch:

env:
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  VERCEL_ORG_ID: ""
  VERCEL_PROJECT_ID: ""
  NODE_VERSION: 22

permissions:
  contents: read
  actions: read
  packages: write

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      repository:       ${{ steps.p.outputs.repository }}
      repository_name:  ${{ steps.p.outputs.repository_name }}
      branch:           ${{ steps.p.outputs.branch }}
      project_type:     ${{ steps.detect.outputs.PROJECT_TYPE }}
      slug:             ${{ steps.cfg.outputs.SLUG }}
      port:             ${{ steps.cfg.outputs.PORT }}
      domain_prod:      ${{ steps.cfg.outputs.DOMAIN_PROD }}
    steps:
      - name: Extract payload (repo/branch)
        id: p
        run: |
          echo "repository=${{ github.event.client_payload.repository || github.repository }}" >> $GITHUB_OUTPUT
          echo "repository_name=${{ github.event.client_payload.repository_name || github.event.repository.name }}" >> $GITHUB_OUTPUT
          echo "branch=${{ github.event.client_payload.branch || github.ref_name }}" >> $GITHUB_OUTPUT

      - name: Checkout target website repo
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.p.outputs.repository }}
          ref: ${{ steps.p.outputs.branch }}
          fetch-depth: 0
          path: site

      - name: Verify package.json present
        working-directory: site
        run: test -f package.json || { echo "package.json not found in site/"; exit 1; }

      - name: Read .cicd-config.yml (slug/port/domain)
        id: cfg
        shell: bash
        working-directory: site
        run: |
          SLUG="site"
          PORT="3000"
          DOMAIN_PROD=""
          if [ -f ".cicd-config.yml" ]; then
            get_val(){ grep -E "^$1:" .cicd-config.yml | head -1 | awk -F': *' '{print $2}' | tr -d "\"'"; }
            SLUG=$(get_val slug || echo "$SLUG")
            PORT=$(get_val port || echo "$PORT")
            DOMAIN_PROD=$(awk '/^domains:/{f=1;next} f && /^[^ ]/{f=0} f{print}' .cicd-config.yml | awk '/prod:/{print $2}' | tr -d "\"'")
          fi
          echo "SLUG=$SLUG" >> $GITHUB_OUTPUT
          echo "PORT=$PORT" >> $GITHUB_OUTPUT
          echo "DOMAIN_PROD=$DOMAIN_PROD" >> $GITHUB_OUTPUT

      - name: Detect project type
        id: detect
        working-directory: site
        run: |
          PT="node"
          if [ -f ".cicd-config.yml" ] && grep -qE '^project_type:\s*static' .cicd-config.yml; then
            PT="static"
          fi
          echo "PROJECT_TYPE=$PT" >> $GITHUB_OUTPUT

  build_test:
    runs-on: ubuntu-latest
    needs: [detect]
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ needs.detect.outputs.repository }}
          ref: ${{ needs.detect.outputs.branch }}
          path: site

      - name: Select Vercel IDs for this site
        run: |
          case "${{ needs.detect.outputs.repository_name }}" in
            drcodezenna)
              echo "VERCEL_ORG_ID=${{ secrets.DRCODEZENNA_VERCEL_ORG_ID }}" >> $GITHUB_ENV
              echo "VERCEL_PROJECT_ID=${{ secrets.DRCODEZENNA_VERCEL_PROJECT_ID }}" >> $GITHUB_ENV
              ;;
            *)
              echo "ℹ️ No per-site Vercel IDs configured for ${{ needs.detect.outputs.repository_name }}."
              ;;
          esac

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install deps
        working-directory: site
        run: |
          if [ -f yarn.lock ]; then yarn install --immutable; \
          elif [ -f pnpm-lock.yaml ]; then corepack enable && pnpm i --frozen-lockfile; \
          else npm ci; fi

      - name: Lint (non-blocking)
        working-directory: site
        run: |
          if [ -f package.json ] && jq -e '.scripts.lint' package.json >/dev/null 2>&1; then \
            npm run lint || true; else echo "no lint script"; fi

      - name: Build
        working-directory: site
        run: npm run build

      - name: Unit tests (optional)
        working-directory: site
        run: npm test || echo "No tests / skipping"

      - name: (static only) assert out/
        if: needs.detect.outputs.project_type == 'static'
        working-directory: site
        run: test -d out || { echo "Static build missing out/"; exit 1; }

      - name: Upload out/ artifact (static only)
        if: needs.detect.outputs.project_type == 'static'
        uses: actions/upload-artifact@v4
        with:
          name: static-export
          path: site/out

  image_build_push:
    needs: [detect, build_test]
    if: needs.detect.outputs.project_type == 'node' && needs.detect.outputs.branch == 'main-hetz'
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.meta.outputs.image }}
      ref:   ${{ steps.meta.outputs.ref }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ needs.detect.outputs.repository }}
          ref: ${{ needs.detect.outputs.branch }}
          path: site

      - name: Derive image coordinates
        id: meta
        run: |
          OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME="${{ needs.detect.outputs.repository_name }}"
          IMAGE="ghcr.io/${OWNER_LOWER}/${REPO_NAME}"
          SHORT="${GITHUB_SHA::7}"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "ref=$IMAGE:$SHORT" >> $GITHUB_OUTPUT

      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push site image (uses site's Dockerfile)
        uses: docker/build-push-action@v6
        with:
          context: site
          push: true
          tags: |
            ${{ steps.meta.outputs.ref }}
            ${{ steps.meta.outputs.image }}:latest

  hetzner_node:
    needs: [detect, image_build_push]
    if: needs.detect.outputs.project_type == 'node' && needs.detect.outputs.branch == 'main-hetz'
    runs-on: ubuntu-latest
    steps:
      - name: Compute SITE_ENV secret key for this repo
        id: k
        run: |
          KEY="$(echo '${{ needs.detect.outputs.repository_name }}' | tr '[:lower:]-' '[:upper:]_')"
          echo "SITE_ENV_KEY=SITE_ENV__${KEY}" >> $GITHUB_OUTPUT

      - name: Sanity check required SSH secrets
        run: |
          test -n "${{ secrets.HZ_HOST }}"    || { echo "❌ Missing secret: HZ_HOST"; exit 1; }
          test -n "${{ secrets.HZ_SSH_KEY }}" || { echo "❌ Missing secret: HZ_SSH_KEY"; exit 1; }

      - name: Deploy over SSH (Traefik labels + DB + app.env)
        uses: appleboy/ssh-action@v1
        env:
          SLUG:       ${{ needs.detect.outputs.slug }}
          PORT:       ${{ needs.detect.outputs.port }}
          DOMAIN:     ${{ needs.detect.outputs.domain_prod }}
          IMAGE_REF:  ${{ needs.image_build_push.outputs.ref }}
          SITE_ENV:   ${{ secrets[steps.k.outputs.SITE_ENV_KEY] }}
          GHCR_USER:  ${{ github.repository_owner }}
          GHCR_TOKEN: ${{ secrets.GHCR_READ_TOKEN || secrets.GITHUB_TOKEN }}
        with:
          host: ${{ secrets.HZ_HOST }}
          username: ${{ secrets.HZ_USER || 'root' }}
          key: ${{ secrets.HZ_SSH_KEY }}
          port: 22
          timeout: 60s
          command_timeout: 15m
          envs: SLUG,PORT,DOMAIN,IMAGE_REF,SITE_ENV,GHCR_USER,GHCR_TOKEN
          script: |
            # keep -e and -o pipefail, but not -u (nounset) because SITE_ENV might be empty
            set -eo pipefail

            # Guard inputs
            SLUG="${SLUG:-}"; PORT="${PORT:-3000}"; DOMAIN="${DOMAIN:-}"; IMAGE_REF="${IMAGE_REF:-}"
            if [ -z "$SLUG" ] || [ -z "$DOMAIN" ] || [ -z "$IMAGE_REF" ]; then
              echo "Missing required input(s): SLUG='$SLUG' DOMAIN='$DOMAIN' IMAGE_REF='${IMAGE_REF:0:20}…'"
              exit 1
            fi
            echo "Deploying $SLUG → https://$DOMAIN  (image: ${IMAGE_REF:0:20}…)"

            # Networks
            docker network create proxy       >/dev/null 2>&1 || true
            docker network create core_db_net >/dev/null 2>&1 || true

            # Site dir
            SITE_DIR="/opt/sites/${SLUG}"
            mkdir -p "$SITE_DIR"
            cd "$SITE_DIR"

            # IMPORTANT: Avoid Compose variable expansion breaking bcrypt ($2b$…)
            # Put the application's env into app.env; keep .env ONLY for compose substitutions if needed.
            printf "%s\n" "${SITE_ENV:-}" | sed 's/\r$//' > app.env

            # Sync DB password to a global DB stack (optional)
            DB_DIR="/opt/services/postgres"
            mkdir -p "$DB_DIR"
            if grep -q '^POSTGRES_PASSWORD=' app.env; then
              awk -F= '/^POSTGRES_PASSWORD=/{print "POSTGRES_PASSWORD="$2}' app.env > "${DB_DIR}/.env"
            fi

            # GHCR login for pulls on the host
            if [ -n "${GHCR_TOKEN:-}" ]; then
              echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USER" --password-stdin
            fi

            # Global DB stack (Postgres + PgBouncer)
            cat > "${DB_DIR}/docker-compose.yml" <<'DBYAML'
            networks:
              core_db_net:
                external: true
                name: core_db_net
            services:
              postgres:
                image: postgres:15
                restart: always
                environment:
                  POSTGRES_USER: admin
                  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_me_now}
                  POSTGRES_DB: drcode
                  POSTGRES_INITDB_ARGS: "--auth=scram-sha-256"
                volumes:
                  - pg_data:/var/lib/postgresql/data
                healthcheck:
                  test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
                  interval: 10s
                  timeout: 5s
                  retries: 10
                networks: [core_db_net]
              pgbouncer:
                image: edoburu/pgbouncer
                restart: always
                environment:
                  DB_USER: admin
                  DB_PASSWORD: ${POSTGRES_PASSWORD:-change_me_now}
                  DB_HOST: postgres
                  DB_NAME: drcode
                  POOL_MODE: transaction
                  MAX_CLIENT_CONN: 200
                  DEFAULT_POOL_SIZE: 20
                depends_on:
                  postgres:
                    condition: service_healthy
                networks: [core_db_net]
            volumes:
              pg_data:
            DBYAML
            (cd "${DB_DIR}" && docker compose up -d)

            # App compose (uses app.env)
            cat > docker-compose.yml <<'YAML'
            services:
              app:
                image: __IMAGE_REF__
                restart: unless-stopped
                env_file:
                  - app.env
                labels:
                  - traefik.enable=true
                  - traefik.http.routers.__SLUG__.rule=Host(`__DOMAIN__`)
                  - traefik.http.routers.__SLUG__.entrypoints=websecure
                  - traefik.http.routers.__SLUG__.tls.certresolver=le
                  - traefik.http.services.__SLUG__.loadbalancer.server.port=__PORT__
                networks:
                  - proxy
                  - core_db_net
            networks:
              proxy:
                external: true
                name: proxy
              core_db_net:
                external: true
                name: core_db_net
            YAML
            sed -i \
              -e "s|__IMAGE_REF__|${IMAGE_REF}|g" \
              -e "s|__SLUG__|${SLUG}|g" \
              -e "s|__DOMAIN__|${DOMAIN}|g" \
              -e "s|__PORT__|${PORT}|g" \
              docker-compose.yml

            docker compose pull || true
            docker compose up -d --remove-orphans

            # Prisma (best-effort)
            docker compose exec -T app sh -lc "npx prisma migrate deploy || true"

      - name: Health check
        run: |
          for i in {1..24}; do
            if curl -fsSL "https://${{ needs.detect.outputs.domain_prod }}/api/healthz" >/dev/null; then
              echo "✅ Site healthy"; exit 0; fi
            echo "retry $i"; sleep 5
          done
          echo "❌ Healthcheck failed"; exit 1

  # Static path (kept for completeness; won't run for project_type=node)
  hetzner_static:
    needs: [detect, build_test]
    if: needs.detect.outputs.project_type == 'static' && needs.detect.outputs.branch == 'main-hetz'
    runs-on: ubuntu-latest
    env:
      SLUG:   ${{ needs.detect.outputs.slug }}
      DOMAIN: ${{ needs.detect.outputs.domain_prod }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: static-export
      - name: Move artifact to ./out
        run: |
          rm -rf out && mkdir -p out
          cp -R static-export/. out/
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & push static image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: site.Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/static-${{ needs.detect.outputs.repository_name }}:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/static-${{ needs.detect.outputs.repository_name }}:latest
      - name: Deploy static container on Hetzner
        uses: appleboy/ssh-action@v1
        env:
          IMAGE_REF: ghcr.io/${{ github.repository_owner }}/static-${{ needs.detect.outputs.repository_name }}:${{ github.sha }}
          GHCR_USER: ${{ github.repository_owner }}
          GHCR_TOKEN: ${{ secrets.GHCR_READ_TOKEN || secrets.GITHUB_TOKEN }}
        with:
          host: ${{ secrets.HZ_HOST }}
          username: ${{ secrets.HZ_USER || 'root' }}
          key: ${{ secrets.HZ_SSH_KEY }}
          port: 22
          timeout: 60s
          command_timeout: 15m
          envs: IMAGE_REF,GHCR_USER,GHCR_TOKEN,SLUG,DOMAIN
          script: |
            set -euo pipefail
            docker network create proxy >/dev/null 2>&1 || true
            if [ -n "${GHCR_TOKEN:-}" ]; then
              echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USER" --password-stdin
            fi
            SITE_DIR="/opt/sites/${SLUG}"
            mkdir -p "$SITE_DIR"
            cd "$SITE_DIR"
            cat > docker-compose.yml <<YAML
            services:
              web:
                image: ${IMAGE_REF}
                restart: unless-stopped
                labels:
                  - traefik.enable=true
                  - traefik.http.routers.${SLUG}.rule=Host(\`${DOMAIN}\`)
                  - traefik.http.routers.${SLUG}.entrypoints=websecure
                  - traefik.http.routers.${SLUG}.tls.certresolver=le
                  - traefik.http.services.${SLUG}.loadbalancer.server.port=80
                networks: [proxy]
            networks:
              proxy:
                external: true
            YAML
            docker compose pull || true
            docker compose up -d --remove-orphans
